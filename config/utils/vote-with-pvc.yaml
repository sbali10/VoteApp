apiVersion: v1
kind: Namespace
metadata:
  name: vote
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vote
  name: vote
  namespace: vote
spec:
  selector:
    matchLabels:
      app: vote
  template:
    metadata:
      labels:
        app: vote
    spec:
      containers:
      - image: lucj/voting:vote
        name: vote
        ports:
        - containerPort: 80
          name: vote
        resources:
          limits:
            cpu: 80m
            memory: 256Mi
          requests:
            cpu: 80m
            memory: 256Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vote
  name: vote
  namespace: vote
spec:
  type: NodePort
  ports:
  - name: "vote-service"
    nodePort: 31001
    port: 5000
    targetPort: 80
  selector:
    app: vote
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
  name: redis
  namespace: vote
spec:
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - image: redis
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - mountPath: /data
          name: redis-data
        resources:
          limits:
            cpu: 80m
            memory: 64Mi
          requests:
            cpu: 80m
            memory: 64Mi
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-claim
  namespace: vote
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
  namespace: vote
spec:
  ports:
  - name: "redis-service"
    port: 6379
    targetPort: 6379
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: worker
  name: worker
  namespace: vote
spec:
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
      - image: lucj/voting:worker
        name: worker
        resources:
          limits:
            cpu: 80m
            memory: 128Mi
          requests:
            cpu: 80m
            memory: 128Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: db
  name: db
  namespace: vote
spec:
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - image: postgres:9.4
        name: postgres
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: db-data
        resources:
          limits:
            cpu: 80m
            memory: 64Mi
          requests:
            cpu: 80m
            memory: 64Mi
      volumes:
      - name: db-data
        persistentVolumeClaim:
          claimName: postgres-claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-claim
  namespace: vote
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: db
  name: db
  namespace: vote
spec:
  type: ClusterIP
  ports:
  - name: "db-service"
    port: 5432
    targetPort: 5432
  selector:
    app: db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: result
  name: result
  namespace: vote
spec:
  selector:
    matchLabels:
      app: result
  template:
    metadata:
      labels:
        app: result
    spec:
      containers:
      - image: lucj/voting:result
        name: result
        ports:
        - containerPort: 80
          name: result
        resources:
          limits:
            cpu: 80m
            memory: 64Mi
          requests:
            cpu: 80m
            memory: 64Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: result
  name: result
  namespace: vote
spec:
  type: NodePort
  ports:
  - name: "result-service"
    nodePort: 31002
    port: 5001
    targetPort: 80
  selector:
    app: result
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote
  namespace: vote
spec:
  rules:
  - host: vote.votingapp.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vote
            port:
              number: 5000
  - host: result.votingapp.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: result
            port:
              number: 5001
